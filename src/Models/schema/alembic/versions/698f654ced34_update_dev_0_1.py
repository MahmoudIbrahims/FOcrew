"""Update Dev_0.1

Revision ID: 698f654ced34
Revises: 44ccde45e83e
Create Date: 2025-10-07 16:12:02.044147

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '698f654ced34'
down_revision: Union[str, None] = '44ccde45e83e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('file_agent_relations')
    op.drop_table('agent_results')
    op.alter_column('user_files', 'processing_error',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_column('user_files', 'storage_method')
    op.drop_column('user_files', 'Usermetadata')
    op.drop_column('user_files', 'full_data')
    op.drop_column('user_files', 'tags')
    op.drop_column('user_files', 'description')
    op.drop_column('user_files', 'raw_content')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user_files', sa.Column('raw_content', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('user_files', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('user_files', sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('user_files', sa.Column('full_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('user_files', sa.Column('Usermetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('user_files', sa.Column('storage_method', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.alter_column('user_files', 'processing_error',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.create_table('agent_results',
    sa.Column('result_id', sa.INTEGER(), server_default=sa.text("nextval('agent_results_result_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('result_uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('agent_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('agent_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('task_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('result_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('result_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('execution_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tokens_used', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('agent_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.project_id'], name='agent_results_project_id_fkey'),
    sa.PrimaryKeyConstraint('result_id', name='agent_results_pkey'),
    sa.UniqueConstraint('result_uuid', name='agent_results_result_uuid_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('file_agent_relations',
    sa.Column('relation_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('file_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('agent_result_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('usage_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('usage_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['agent_result_id'], ['agent_results.result_id'], name='file_agent_relations_agent_result_id_fkey'),
    sa.ForeignKeyConstraint(['file_id'], ['user_files.file_id'], name='file_agent_relations_file_id_fkey'),
    sa.PrimaryKeyConstraint('relation_id', name='file_agent_relations_pkey')
    )
    # ### end Alembic commands ###
